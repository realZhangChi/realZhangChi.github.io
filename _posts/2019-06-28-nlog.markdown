---
layout: post
title: "NLog初识"
subtitle: 'Getting started with NLog'
author: "Chi"
date: 2019-06-28 16:00
header-style: text
catalog: true
tags:
  - NLog
  - Getting Started
  - 入门
---

## NLog简介

NLog是一个灵活的免费日志记录平台，适用于各种.NET平台，包括.NET standard。NLog可以轻松将日志数据写入多个目标如数据库、文件、控制台。并即时更改日志记录配置。
NLog支持.NET Frameworks 3.5-4.8，并且还支持在ASP.NET Core 1和2中使用Microsoft的依赖注入。

## 开始使用NLog

以下配置方案支持.NET Framework 3.5 - 4.8 和 .NET Core (NetStandard 1.3+)。
NLog可以通过以下几个步骤进行配置并使用：

1. 通过nuget安装NLog包，
2. 配置NLog输出目标，
3. 写log

## 配置NLog输出目标

配置了NLog日志输出目标后，就可以使用NLog来写日志。

通过向应用程序项目添加`NLog.config`文件，就可以使用XML来配置NLog（文件属性：Copy If newer）。

NLog将通过搜索多个文件位置自动加载`NLog.config`。 这是`NLog.config`文件的一个简单示例：

``` XML
<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

    <targets>
        <target name="logfile" xsi:type="File" fileName="file.txt" />
        <target name="logconsole" xsi:type="Console" />
    </targets>

    <rules>
        <logger name="*" minlevel="Info" writeTo="logconsole" />
        <logger name="*" minlevel="Debug" writeTo="logfile" />
    </rules>
</nlog>
```

要以编程方式进行配置，可以在代码中执行此操作：

``` C#
var config = new NLog.Config.LoggingConfiguration();

// Targets where to log to: File and Console
var logfile = new NLog.Targets.FileTarget("logfile") { FileName = "file.txt" };
var logconsole = new NLog.Targets.ConsoleTarget("logconsole");

// Rules for mapping loggers to targets
config.AddRule(LogLevel.Info, LogLevel.Fatal, logconsole);
config.AddRule(LogLevel.Debug, LogLevel.Fatal, logfile);

// Apply config
NLog.LogManager.Configuration = config;
```

这些配置将Log输出重定向到指定的输出目标。他还提供过滤选项以仅输出相关的日志事件(logevents)。过滤通常是基于logger-name和loglevel（例如，`name ="*" minlevel ="Trace"`表示输出所有日志）来进行的。

## 写log示例

``` C#
public static class Program
{
    private static readonly NLog.Logger Logger = NLog.LogManager.GetCurrentClassLogger();

    public void Main()
    {
        try
        {
           Logger.Info("Hello world");
           System.Console.ReadKey();
        }
        catch (Exception ex)
        {
           Logger.Error(ex, "Goodbye cruel world");
        }
    }
}
```

Logger可以根据不同的LogLevels来写日志，其中LogLevels由logging-rules指定（请参阅上面的配置示例中的`minLevel`），因此只有相关的消息才被记录到指定的日志目标载体。 LogLevel标识了消息的重要性和详细程度。NLog可以主要根据其logger name和log level来路由日志消息。

## NLog的日志等级

NLog支持一下几种log levels：

- `Trace` - 非常详细的日志，可能包括很多高容量信息如负载信息等。 此日志级别通常仅在开发期间启用。
- `Debug` - 包含调试信息，`Debug`级别的日志没有`Trace`级别的那么详细。需要注意的是它不支持在生产环境中使用。
- `Info` - 普通信息，可以在生产环境中使用。
- `Warn` - 警告信息，通常用于可以恢复的非关键问题，或临时故障。
- `Error` - 错误信息，多数情况下这些错误信息是系统抛出的异常(`Exceptions`)。
- `Fatal` - 非常严重的错误！

在写日志的时候日志系统不依赖于特定的输出目标(如文件、数据库等）。日志可以根据日志记录规则配置(logging-rules configuration)来写到多个不同的输出目标中。这种分离设计是我们可以保持在代码中来写记录日志的语句，并且很容易更改日志的记录方式和输出目标——只需要在一个位置更改日志配置就可以了。

## 参考

> [NLog](https://nlog-project.org/)
> [Tutorial·NLog](https://github.com/nlog/nlog/wiki/Tutorial)
