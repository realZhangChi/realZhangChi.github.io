<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>所有文章 - zhangchi.io</title><link>https://zhangchi.io/posts/</link><description>所有文章 | zhangchi.io</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>zliming@outlook.com (张驰)</managingEditor><webMaster>zliming@outlook.com (张驰)</webMaster><lastBuildDate>Wed, 01 Mar 2023 09:45:29 +0800</lastBuildDate><atom:link href="https://zhangchi.io/posts/" rel="self" type="application/rss+xml"/><item><title>如何在 Maui 中使用 EasyFloat 显示浮窗</title><link>https://zhangchi.io/posts/use-easy-float-in-maui/</link><pubDate>Wed, 01 Mar 2023 09:45:29 +0800</pubDate><author>作者</author><guid>https://zhangchi.io/posts/use-easy-float-in-maui/</guid><description>EasyFloat Android Sdk EasyFloat 是一个开源的 Android 浮窗框架，支持可拖拽悬浮窗口，支持页面过滤、自定义动画，可设置单页面浮窗、前台浮窗、全局浮窗，浮窗权限按需自动申请等多</description></item><item><title>如何在 Maui 中全局处理异常（异步方法）</title><link>https://zhangchi.io/posts/handle-exception-of-async-method-in-maui/</link><pubDate>Mon, 27 Feb 2023 15:40:52 +0800</pubDate><author>作者</author><guid>https://zhangchi.io/posts/handle-exception-of-async-method-in-maui/</guid><description>在“如何在 Maui 中全局处理异常”一文中介绍了通过 Autofac 动态代理，对 ViewModel 进行拦截，全局捕获 ViewModel 中的异常，并使用 Toaster 弹出异常消息提示。然而，Autofac 中的</description></item><item><title>如何在 Maui 中全局处理异常</title><link>https://zhangchi.io/posts/handle-exception-in-maui/</link><pubDate>Sun, 26 Feb 2023 16:14:03 +0800</pubDate><author>作者</author><guid>https://zhangchi.io/posts/handle-exception-in-maui/</guid><description>在“如何在Maui中使用Autofac”一文中介绍了，如何在 Maui 中使用 Autofac 依赖注入容器。使用 Autofac ，可以实现面向切面编程（AOP）等。在 Maui 中进行全局</description></item><item><title>在 Maui Android 中使用 Toaster</title><link>https://zhangchi.io/posts/use-toaster-in-maui-android/</link><pubDate>Thu, 23 Feb 2023 14:22:37 +0800</pubDate><author>作者</author><guid>https://zhangchi.io/posts/use-toaster-in-maui-android/</guid><description>Toaster Android Sdk Toaster 是一个开源的 Android 吐司框架，原名 ToastUtils ，已更名为 Toaster 。 Toaster 项目在 github 上开源，地址：https://github.com/getActivity/T</description></item><item><title>如何在Maui中使用Autofac</title><link>https://zhangchi.io/posts/use-autofac-in-maui/</link><pubDate>Tue, 21 Feb 2023 13:45:20 +0800</pubDate><author>作者</author><guid>https://zhangchi.io/posts/use-autofac-in-maui/</guid><description>Autofac是一个开源的控制反转容器，通过将.NET程序的控制反转容器替换为Autofac，可以实现例如属性注入、面向切面编程等功能。 引用</description></item><item><title>Abp极简教程1 应用和模块</title><link>https://zhangchi.io/posts/abp-tutorial-1-application-and-module/</link><pubDate>Thu, 23 Dec 2021 04:12:10 +0000</pubDate><author>作者</author><guid>https://zhangchi.io/posts/abp-tutorial-1-application-and-module/</guid><description>Abp是一个基于.NET的开源应用程序框架，它遵循最佳实践和约定，根据DDD模式进行设计和开发，并提供了强大的基础设施和完整的架构。 Abp提</description></item><item><title>在单例服务中解析依赖项</title><link>https://zhangchi.io/posts/resolve-dependencies-in-singleton-service/</link><pubDate>Wed, 22 Dec 2021 06:22:01 +0000</pubDate><author>作者</author><guid>https://zhangchi.io/posts/resolve-dependencies-in-singleton-service/</guid><description>在依赖注入系统中，依赖项的生命周期通常分为瞬时的（Transient）、作用域的（Scoped）、单例的（Singleton）三种。单例生命</description></item><item><title>禁用ASP.NET Core开发环境的HTTPS</title><link>https://zhangchi.io/posts/configure-protocol-and-port/</link><pubDate>Wed, 22 Dec 2021 04:33:11 +0000</pubDate><author>作者</author><guid>https://zhangchi.io/posts/configure-protocol-and-port/</guid><description>在开发ASP.NET Core的项目时，默认地是使用HTTPS安全协议的。有时候可能不希望在本地的开发环境中使用HTTPS，更改这一默认行为非</description></item><item><title>在Abp中根据ExtraProperties进行查询</title><link>https://zhangchi.io/posts/query-by-extra-properties-in-abp/</link><pubDate>Fri, 17 Dec 2021 08:16:35 +0000</pubDate><author>作者</author><guid>https://zhangchi.io/posts/query-by-extra-properties-in-abp/</guid><description>Abp框架提供了实体扩展系统，允许在不对类的定义进行更改的情况下，向对象中添加额外的属性。默认地，额外属性是以json对象的形式存储在数据库</description></item><item><title>如何在Maui中使用依赖注入</title><link>https://zhangchi.io/posts/dependency-injection-in-maui/</link><pubDate>Wed, 27 Oct 2021 10:31:05 +0000</pubDate><author>作者</author><guid>https://zhangchi.io/posts/dependency-injection-in-maui/</guid><description>依赖关系注入(DI)是 .NET 中的一等公民，如果熟悉 .NET 开发，对依赖注入则不会陌生。依赖关系注入是一种在类及其依赖关系之间实现控制反转(IoC)的技</description></item></channel></rss>